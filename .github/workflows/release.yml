name: Release and Publish

on:
  push:
    branches:
      - main

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          registry-url: "https://registry.npmjs.org"

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run linting
        run: pnpm run lint

      - name: Run type checking
        run: pnpm run type-check

      - name: Extract version from commit subject via git
        id: extract-version
        shell: bash
        run: |
          set -Eeuo pipefail
          SUBJECT="$(git log -1 --pretty=%s)"
          echo "Subject: $SUBJECT"
          if [[ "$SUBJECT" =~ \#v([0-9]+\.[0-9]+\.[0-9]+) ]]; then
            echo "version=${BASH_REMATCH[1]}" >> "$GITHUB_OUTPUT"
          else
            echo "version=" >> "$GITHUB_OUTPUT"
          fi

      - name: Create Git tag
        if: steps.extract-version.outputs.version != ''
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a "v${{ steps.extract-version.outputs.version }}" -m "Release v${{ steps.extract-version.outputs.version }}"
          git push origin "v${{ steps.extract-version.outputs.version }}"

      - name: Update package.json version
        if: steps.extract-version.outputs.version != ''
        run: |
          pnpm version ${{ steps.extract-version.outputs.version }} --no-git-tag-version

      - name: Build library
        if: steps.extract-version.outputs.version != ''
        run: pnpm run build

      - name: Publish to npm
        if: steps.extract-version.outputs.version != ''
        run: pnpm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create Release
        if: steps.extract-version.outputs.version != ''
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.extract-version.outputs.version }}
          release_name: Release v${{ steps.extract-version.outputs.version }}
          body: |
            ## What's Changed

            This release includes:
            - Automated release via GitHub Actions
            - Version ${{ steps.extract-version.outputs.version }}

            ## Installation

            ```bash
            npm install uixio@${{ steps.extract-version.outputs.version }}
            ```
          draft: false
          prerelease: false
