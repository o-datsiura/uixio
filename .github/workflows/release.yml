name: Release and Publish

on:
  push:
    branches:
      - main

permissions:
  contents: write  # щоб пушити теги і коміти від імені GITHUB_TOKEN

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          # persist-credentials: true  # за замовчуванням true, залишаємо

      - name: Fetch tags
        run: git fetch --tags --force

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          registry-url: "https://registry.npmjs.org"

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Determine next version (Conventional Commits)
        id: version
        shell: bash
        run: |
          set -Eeuo pipefail

          # Останній тег або порожньо, якщо тегів нема
          if LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null); then
            echo "Last tag: $LAST_TAG"
            RANGE="${LAST_TAG}..HEAD"
          else
            echo "No tags found yet"
            RANGE="$(git rev-list --max-parents=0 HEAD)..HEAD"  # з першого коміту
          fi

          COMMITS="$(git log ${RANGE} --pretty=format:"%s%n%b")"
          echo "Commits since last tag (or root):"
          echo "$COMMITS"

          BUMP=""
          if echo "$COMMITS" | grep -q "BREAKING CHANGE"; then
            BUMP="major"
          elif echo "$COMMITS" | grep -Eq "^feat(\(|:)|^.*!:.*"; then
            BUMP="major"
          elif echo "$COMMITS" | grep -Eq "^feat(\(|:)"; then
            BUMP="minor"
          elif echo "$COMMITS" | grep -Eq "^fix(\(|:)|^perf(\(|:)"; then
            BUMP="patch"
          else
            echo "No release-worthy changes found"
            echo "skip=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # Поточна версія (з тега або 0.0.0)
          if [ -n "${LAST_TAG:-}" ]; then
            CURRENT_VERSION="${LAST_TAG#v}"
          else
            CURRENT_VERSION="0.0.0"
          fi

          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          case "$BUMP" in
            major) MAJOR=$((MAJOR+1)); MINOR=0; PATCH=0 ;;
            minor) MINOR=$((MINOR+1)); PATCH=0 ;;
            patch) PATCH=$((PATCH+1)) ;;
          esac

          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "Bump type: $BUMP → New version: $NEW_VERSION"

          echo "version=$NEW_VERSION" >> "$GITHUB_OUTPUT"

      - name: Stop if no release
        if: steps.version.outputs.skip == 'true'
        run: echo "No release this time."

      - name: Configure git author (for commits)
        if: steps.version.outputs.skip != 'true'
        run: |
          git config user.email "action@github.com"
          git config user.name "GitHub Action"

      - name: Update package.json version (no auto-commit)
        if: steps.version.outputs.skip != 'true'
        run: pnpm version ${{ steps.version.outputs.version }} --no-git-tag-version --no-commit

      - name: Build library
        if: steps.version.outputs.skip != 'true'
        run: pnpm run build

      - name: Commit and push version bump
        if: steps.version.outputs.skip != 'true'
        run: |
          git add package.json package-lock.json pnpm-lock.yaml 2>/dev/null || true
          if ! git diff --cached --quiet; then
            git commit -m "chore(release): v${{ steps.version.outputs.version }}"
            git push origin HEAD:main
          else
            echo "No version file changes to commit."
          fi

      - name: Create Git tag
        if: steps.version.outputs.skip != 'true'
        run: |
          git tag -a "v${{ steps.version.outputs.version }}" -m "Release v${{ steps.version.outputs.version }}"
          git push origin "v${{ steps.version.outputs.version }}"

      - name: Publish to npm
        if: steps.version.outputs.skip != 'true'
        run: pnpm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
