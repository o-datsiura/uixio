name: Release and Publish

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Fetch tags
        run: git fetch --tags --force

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          registry-url: "https://registry.npmjs.org"

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Detect channel and bump type
        id: detect
        shell: bash
        run: |
          set -Eeuo pipefail

          # Determine range of commits since last tag
          if LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null); then
            RANGE="${LAST_TAG}..HEAD"
          else
            RANGE="$(git rev-list --max-parents=0 HEAD)..HEAD"
          fi

          COMMITS="$(git log ${RANGE} --pretty=format:'%s%n%b')"
          echo "Commits in range:"
          echo "$COMMITS"

          # Determine release channel by commit flags
          if echo "$COMMITS" | grep -qi '\[alpha\]'; then
            CHANNEL="alpha"
          elif echo "$COMMITS" | grep -qi '\[beta\]'; then
            CHANNEL="beta"
          else
            CHANNEL="latest"
          fi
          echo "channel=$CHANNEL" >> "$GITHUB_OUTPUT"

          if echo "$COMMITS" | grep -q "BREAKING CHANGE"; then
            BUMP="major"
          elif echo "$COMMITS" | grep -Eq '^.*!:|^feat(\(|:)'; then
            if echo "$COMMITS" | grep -Eq '^.*!:'; then
              BUMP="major"
            else
              BUMP="minor"
            fi
          elif echo "$COMMITS" | grep -Eq '^fix(\(|:)|^perf(\(|:)'; then
            BUMP="patch"
          else
            if [[ "$CHANNEL" == "alpha" || "$CHANNEL" == "beta" ]]; then
              BUMP="prerelease"
            else
              echo "No release-worthy changes found"
              echo "skip=true" >> "$GITHUB_OUTPUT"
              exit 0
            fi
          fi
          echo "bump=$BUMP" >> "$GITHUB_OUTPUT"

          if LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null); then
            BASE_FROM_TAG="${LAST_TAG#v}"
            CLEAN_VERSION="$(echo "$BASE_FROM_TAG" | cut -d '-' -f 1)"
          else
            CLEAN_VERSION="0.0.0"
          fi

          IFS='.' read -r MAJOR MINOR PATCH <<< "$CLEAN_VERSION"
          case "$BUMP" in
            major) MAJOR=$((MAJOR+1)); MINOR=0; PATCH=0 ;;
            minor) MINOR=$((MINOR+1)); PATCH=0 ;;
            patch) PATCH=$((PATCH+1)) ;;
          esac
          NEXT_STABLE="${MAJOR}.${MINOR}.${PATCH}"
          echo "next_stable=$NEXT_STABLE" >> "$GITHUB_OUTPUT"

      - name: Stop if no release
        if: steps.detect.outputs.skip == 'true'
        run: echo "No release this time."

      - name: Configure git author
        if: steps.detect.outputs.skip != 'true'
        run: |
          git config user.email "action@github.com"
          git config user.name "GitHub Action"

      - name: Determine next prerelease index (only for alpha/beta)
        if: steps.detect.outputs.skip != 'true' && steps.detect.outputs.channel != 'latest'
        id: preidx
        shell: bash
        run: |
          set -Eeuo pipefail
          CHANNEL="${{ steps.detect.outputs.channel }}"
          NEXT_STABLE="${{ steps.detect.outputs.next_stable }}"

          BASE="v${NEXT_STABLE}-${CHANNEL}"

          # List tags matching BASE or BASE.N (e.g. v1.2.3-alpha or v1.2.3-alpha.0)
          TAGS=$(git tag --list "${BASE}*")
          if [ -z "$TAGS" ]; then
            NEXT_N=0
          else
            LAST_MATCHING_TAG=$(echo "$TAGS" | sort -V | tail -n1)
            if [ "$LAST_MATCHING_TAG" = "$BASE" ]; then
              NEXT_N=1
            else
              LAST_N="${LAST_MATCHING_TAG##*.}"
              if [[ "$LAST_N" =~ ^[0-9]+$ ]]; then
                NEXT_N=$((LAST_N+1))
              else
                NEXT_N=0
              fi
            fi
          fi

          VERSION="${NEXT_STABLE}-${CHANNEL}.${NEXT_N}"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "tag=$CHANNEL" >> "$GITHUB_OUTPUT"
          echo "Calculated prerelease version: $VERSION"

      - name: Bump version in package.json
        if: steps.detect.outputs.skip != 'true'
        id: bump
        shell: bash
        run: |
          set -Eeuo pipefail
          CHANNEL="${{ steps.detect.outputs.channel }}"
          NEXT_STABLE="${{ steps.detect.outputs.next_stable }}"

          if [ "$CHANNEL" = "latest" ]; then
            TARGET_VERSION="$NEXT_STABLE"
            TARGET_TAG="latest"
          else
            TARGET_VERSION="${{ steps.preidx.outputs.version }}"
            TARGET_TAG="${{ steps.preidx.outputs.tag }}"
          fi

          pnpm version "$TARGET_VERSION" --no-git-tag-version --no-commit

          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "version=$NEW_VERSION" >> "$GITHUB_OUTPUT"
          echo "tag=$TARGET_TAG" >> "$GITHUB_OUTPUT"
          echo "Bumped to $NEW_VERSION (tag: $TARGET_TAG)"

      - name: Build library
        if: steps.detect.outputs.skip != 'true'
        run: pnpm run build

      - name: Commit version bump
        if: steps.detect.outputs.skip != 'true'
        run: |
          git add package.json package-lock.json pnpm-lock.yaml 2>/dev/null || true
          if ! git diff --cached --quiet; then
            git commit -m "chore(release): v${{ steps.bump.outputs.version }}"
            git push origin HEAD:main
          else
            echo "No version file changes to commit."
          fi

      - name: Create and push Git tag
        if: steps.detect.outputs.skip != 'true'
        run: |
          git tag -a "v${{ steps.bump.outputs.version }}" -m "Release v${{ steps.bump.outputs.version }}"
          git push origin "v${{ steps.bump.outputs.version }}"

      - name: Publish to npm
        if: steps.detect.outputs.skip != 'true'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          npm config set //registry.npmjs.org/:_authToken=${NODE_AUTH_TOKEN}
          pnpm publish --access public --tag "${{ steps.bump.outputs.tag }}"
