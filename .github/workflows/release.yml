name: Release and Publish

on:
  push:
    branches:
      - main

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Determine next version
        id: version
        shell: bash
        run: |
          set -e

          # Отримуємо останній тег або 0.0.0
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0")

          echo "Last tag: $LAST_TAG"

          # Збираємо коміти з останнього тега
          COMMITS=$(git log ${LAST_TAG}..HEAD --pretty=format:"%s%n%b")

          echo "Commits since last tag:"
          echo "$COMMITS"

          BUMP=""

          if echo "$COMMITS" | grep -q "BREAKING CHANGE"; then
            BUMP="major"
          elif echo "$COMMITS" | grep -Eq "^feat(\(|:)|^.*!:.*"; then
            BUMP="major"
          elif echo "$COMMITS" | grep -Eq "^feat(\(|:)"; then
            BUMP="minor"
          elif echo "$COMMITS" | grep -Eq "^fix(\(|:)|^perf(\(|:)"; then
            BUMP="patch"
          else
            echo "No release-worthy changes found"
            echo "skip=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          echo "Bump type: $BUMP"

          # Рахуємо нову версію
          CURRENT_VERSION=$LAST_TAG
          IFS='.' read -r MAJOR MINOR PATCH <<< "${CURRENT_VERSION#v}"

          case $BUMP in
            major) MAJOR=$((MAJOR+1)); MINOR=0; PATCH=0 ;;
            minor) MINOR=$((MINOR+1)); PATCH=0 ;;
            patch) PATCH=$((PATCH+1)) ;;
          esac

          NEW_VERSION="$MAJOR.$MINOR.$PATCH"

          echo "New version: $NEW_VERSION"
          echo "version=$NEW_VERSION" >> "$GITHUB_OUTPUT"

      - name: Stop if no release
        if: steps.version.outputs.skip == 'true'
        run: echo "No release this time."

      - name: Update package.json version
        if: steps.version.outputs.skip != 'true'
        run: pnpm version ${{
          steps.version.outputs.version
        }} --no-git-tag-version

      - name: Build library
        if: steps.version.outputs.skip != 'true'
        run: pnpm run build

      - name: Create Git tag
        if: steps.version.outputs.skip != 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a "v${{ steps.version.outputs.version }}" -m "Release v${{ steps.version.outputs.version }}"
          git push origin "v${{ steps.version.outputs.version }}"

      - name: Publish to npm
        if: steps.version.outputs.skip != 'true'
        run: pnpm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
