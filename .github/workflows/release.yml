name: Release

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Fetch tags
        run: git fetch --tags --force

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Detect channel and bump type
        id: detect
        shell: bash
        run: |
          set -Eeuo pipefail

          if LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null); then
            RANGE="${LAST_TAG}..HEAD"
          else
            RANGE="$(git rev-list --max-parents=0 HEAD)..HEAD"
          fi

          COMMITS="$(git log ${RANGE} --pretty=format:'%s%n%b')"
          echo "Commits in range:"
          echo "$COMMITS"

          if echo "$COMMITS" | grep -qi '\[release\]'; then
            RELEASE_TRIGGERED=true
          else
            RELEASE_TRIGGERED=false
          fi
          echo "release_triggered=$RELEASE_TRIGGERED" >> "$GITHUB_OUTPUT"

          if echo "$COMMITS" | grep -qi '\[alpha\]'; then
            CHANNEL="alpha"
          elif echo "$COMMITS" | grep -qi '\[beta\]'; then
            CHANNEL="beta"
          else
            CHANNEL="latest"
          fi
          echo "channel=$CHANNEL" >> "$GITHUB_OUTPUT"

          if echo "$COMMITS" | grep -q "BREAKING CHANGE"; then
            BUMP="major"
          elif echo "$COMMITS" | grep -Eq '^.*!:|^feat(\(|:)'; then
            if echo "$COMMITS" | grep -Eq '^.*!:'; then
              BUMP="major"
            else
              BUMP="minor"
            fi
          elif echo "$COMMITS" | grep -Eq '^fix(\(|:)|^perf(\(|:)'; then
            BUMP="patch"
          else
            if [[ "$CHANNEL" == "alpha" || "$CHANNEL" == "beta" ]]; then
              BUMP="patch"
            else
              echo "No release-worthy changes found"
              echo "skip=true" >> "$GITHUB_OUTPUT"
              exit 0
            fi
          fi
          echo "bump=$BUMP" >> "$GITHUB_OUTPUT"

          if LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null); then
            BASE_FROM_TAG="${LAST_TAG#v}"
            CLEAN_VERSION="$(echo "$BASE_FROM_TAG" | cut -d '-' -f 1)"
          else
            CLEAN_VERSION="0.0.0"
          fi

          IFS='.' read -r MAJOR MINOR PATCH <<< "$CLEAN_VERSION"
          case "$BUMP" in
            major) MAJOR=$((MAJOR+1)); MINOR=0; PATCH=0 ;;
            minor) MINOR=$((MINOR+1)); PATCH=0 ;;
            patch) PATCH=$((PATCH+1)) ;;
          esac
          BASE_VERSION="${MAJOR}.${MINOR}.${PATCH}"

          if [ "$CHANNEL" != "latest" ]; then
            BASE_VERSION="${BASE_VERSION}-${CHANNEL}"
          fi

          echo "version=$BASE_VERSION" >> "$GITHUB_OUTPUT"

      - name: Stop if no release
        if: steps.detect.outputs.skip == 'true'
        run: echo "No release this time."

      - name: Configure git author
        if: steps.detect.outputs.skip != 'true'
        run: |
          git config user.email "action@github.com"
          git config user.name "GitHub Action"

      - name: Bump version in package.json and commit
        if: steps.detect.outputs.skip != 'true'
        run: |
          TARGET_VERSION="${{ steps.detect.outputs.version }}"

          node -e "let pkg=require('./package.json');pkg.version='${TARGET_VERSION}';require('fs').writeFileSync('./package.json', JSON.stringify(pkg,null,2)+'\n')"

          git add package.json
          git commit -m "release: v$TARGET_VERSION"
          git tag -a "v$TARGET_VERSION" -m "Release v$TARGET_VERSION"
          git push origin HEAD:main --tags

      - name: Create GitHub Release
        if: steps.detect.outputs.release_triggered == 'true' && steps.detect.outputs.skip != 'true'
        uses: actions/create-release@v1
        with:
          tag_name: "v${{ steps.detect.outputs.version }}"
          release_name: "v${{ steps.detect.outputs.version }}"
          body: "Automated release created by GitHub Actions"
          draft: false
          prerelease: ${{ contains(steps.detect.outputs.version, '-alpha') || contains(steps.detect.outputs.version, '-beta') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build library
        if: steps.detect.outputs.skip != 'true'
        run: pnpm run build
